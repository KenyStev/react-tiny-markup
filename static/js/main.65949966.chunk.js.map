{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","React","useState","val","setVal","val2","setVal2","className","onChange","e","target","value","rows","renderer","p","tag","createElement","key","children","defaultRenderer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAkFeA,MA9Df,WAAgB,IAAD,EACSC,IAAMC,SAjBnB,sOAgBI,mBACNC,EADM,KACDC,EADC,OAEWH,IAAMC,SAVpB,yLAQG,mBAENG,EAFM,KAEAC,EAFA,KAIb,OACE,yBAAKC,UAAU,OACb,iDACA,2BACE,6BACE,gEAEF,6BACE,8DAIJ,yBAAKA,UAAU,QACb,8BACEA,UAAU,WACVC,SAAU,SAAAC,GAAC,OAAIL,EAAOK,EAAEC,OAAOC,QAC/BC,KAAM,GACND,MAAOR,IAET,yBAAKI,UAAU,SAAf,UACA,4BAAQA,UAAU,UAChB,kBAAC,IAAD,KAAkBJ,IAGpB,8BACEI,UAAU,WACVC,SAAU,SAAAC,GAAC,OAAIH,EAAQG,EAAEC,OAAOC,QAChCC,KAAM,GACND,MAAON,IAET,yBAAKE,UAAU,SAAf,UACA,4BAAQA,UAAU,UAChB,kBAAC,IAAD,CACEM,SAAU,SAAAC,GACR,OAAQA,EAAEC,KACR,IAAK,KACH,OAAOd,IAAMe,cACX,QACA,CAAEC,IAAKH,EAAEG,KACTH,EAAEI,UAEN,IAAK,IACH,OAAO,KACT,IAAK,YACH,OAAO,yBAAKX,UAAU,SAASO,EAAEI,UACnC,QACE,OAAOC,YAAgBL,MAI5BT,OC9DOe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65949966.chunk.js","sourcesContent":["import React from 'react';\nimport ReactTinyMarkup, { defaultRenderer } from 'react-tiny-markup';\nimport './App.css';\n\nconst first = `Default settings allow basic tags like\n<b>bold</b>, <i>italic</i>, line <br /> break are supported.\n<ul>\n  <li>as well as lists</li>\n  <li>superscript: E = mc<sup>2</sup></li>\n  <li>subscript: H<sub>2</sub>O</li>\n</ul>\n`;\nconst second = `<p>Rendering behavior can be completely changed</p>\n<h1>E.g. by swapping tags</h1>\n<br />\n<a>not rendering them at all</a>\n<br />\nor define <sacrebleu>custom ones</sacrebleu>\n`;\n\nfunction App() {\n  const [val, setVal] = React.useState(first);\n  const [val2, setVal2] = React.useState(second);\n\n  return (\n    <div className=\"App\">\n      <h1>react-tiny-markup</h1>\n      <p>\n        <pre>\n          <code>npm install react-tiny-markup</code>\n        </pre>\n        <pre>\n          <code>yarn add react-tiny-markup</code>\n        </pre>\n      </p>\n\n      <div className=\"grid\">\n        <textarea\n          className=\"textarea\"\n          onChange={e => setVal(e.target.value)}\n          rows={10}\n          value={val}\n        />\n        <div className=\"arrow\">→</div>\n        <output className=\"output\">\n          <ReactTinyMarkup>{val}</ReactTinyMarkup>\n        </output>\n\n        <textarea\n          className=\"textarea\"\n          onChange={e => setVal2(e.target.value)}\n          rows={10}\n          value={val2}\n        />\n        <div className=\"arrow\">→</div>\n        <output className=\"output\">\n          <ReactTinyMarkup\n            renderer={p => {\n              switch (p.tag) {\n                case 'h1':\n                  return React.createElement(\n                    'small',\n                    { key: p.key },\n                    p.children\n                  );\n                case 'a':\n                  return null;\n                case 'sacrebleu':\n                  return <div className=\"pulse\">{p.children}</div>;\n                default:\n                  return defaultRenderer(p);\n              }\n            }}\n          >\n            {val2}\n          </ReactTinyMarkup>\n        </output>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}